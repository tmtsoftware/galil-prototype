name: Galil
connection: tcp
deviceSadRegex: "(?)"
errorNotifier: "*"
connectionProperties: {
  host: galil1
  port: 23
  timeout: 1000
}
commandMap: {
  // Note: Special handling for binary QR command response
  getDataRecord: {
    command: QR
    responseFormat: ""
  }
  getErrorCode: {
    command: TC0
    responseFormat: ".*?(eCode)"
  }
  setRelTarget: {
    command: "PR(axis)=(counts)"
    responseFormat: ""
  }
  getRelTarget: {
    command: "PR(axis)=?"
    responseFormat: ".*?(counts)"
  }
  setMotorPosition: {
    command: "DP(axis)=(counts)"
    responseFormat: ""
  }
  getMotorPosition: {
    command: "RP(axis)"
    responseFormat: ".*?(counts)"
  }
  motorOff: {
    command: "MO(axis)"
    responseFormat: ""
  }
  setMotorSpeed: {
    command: "SP(axis)=(speed)"
    responseFormat: ""
  }
  getMotorSpeed: {
    command: "SP(axis)=?"
    responseFormat: "(speed)"
  }
  setJogSpeed: {
    command: "JG(axis)=(speed)"
    responseFormat: ""
  }
  getJogSpeed: {
    command: "JG(axis)=?"
    responseFormat: ".*?(speed)"
  }
  setAbsTarget: {
    command: "PA(axis)=(counts)"
    responseFormat: ""
  }
  beginMotion: {
    command: "BG(axis)"
    responseFormat: ""
  }
  stopMotion: {
    command: "ST(axis)"
    responseFormat: ""
  }
  getErrorDesc: {
    command: TC1
    responseFormat: "(eCode) (eDesc)"
  }
  setMotorSmoothing: {
    command: "KS(axis)=(smooth)"
    responseFormat: ""
  }
  getMotorSmoothing: {
    command: "KS(axis)=?"
    responseFormat: ".*?(smooth)"
  }
  setMotorType: {
    command: "MT(axis)=?"
    responseFormat: ".*?(mType)"
  }
  getMotorType: {
    command: "MT(axis)=(mType)"
    responseFormat: ""
  }
  setLowCurrent: {
    command: "LC(axis)=(lcParam)"
    responseFormat: ""
  }
  getLowCurrent: {
    command: "LC(axis)=?"
    responseFormat: "(lcParam)"
  }
  switchStatus: {
    command: "TS(axis)"
    responseFormat: "(swStatus)"
  }
  motorOn: {
    command: "SH(axis)"
    responseFormat: ""
  }
  setBrushlessAxis: {
  	command: "BA(axis)"
  	responseFormat: ""
  }
  setAnalogFeedbackSelect: {
    command: "AF(axis)=(interpCounts)"
    responseFormat: ""
  }
  setBrushlessModulus: {
    command: "BM(axis)=(brushlessModulus)"
    responseFormat: ""
  }
  brushlessZero: {
    command: "BZ(axis)=(volts)"
    responseFormat: ""
  }
  setHomingMode: {
    command: "HM(axis)"
    responseFormat: ""
  }
  setFindIndexMode: {
    command: "FI(axis)"
    responseFormat: ""
  }
  
}
paramDefMap: {
  axis: {
    type: char
    dataRegex: "([a-zA-Z])"
  }
  eDesc: {
    type: string
    dataRegex: "(.+)"
  }
  mType: {
    type: double
    range: "1,-1,1.5,-1.5,2,-2,2.5,-2.5"
    dataRegex: "([+-]{0,1}\\d+\\.\\d+)"
  }
  eCode: {
    type: int
    dataRegex: "(\\d{1,2})"
  }
  swStatus: {
    type: int
    dataRegex: "(\\d{1,3})"
  }
  lcParam: {
    type: int
    range: "[0,2]"
    dataRegex: "(\\d)"
  }
  smooth: {
    type: double
    range: "[0.25,64.0]"
    dataRegex: "(\\d+\\.\\d+)"
  }
  speed: {
    type: int
    dataRegex: "(\\d+?)"
  }
  counts: {
    type: int
    dataRegex: "(\\d+)"
  }
  volts: {
    type: double
    range: "1,-1,1.5,-1.5,2,-2,2.5,-2.5"
    dataRegex: "([+-]{0,1}\\d+\\.\\d+)"
  }
  interpCounts: {
    type: int
    range: "[5,6,7,8,9,10,11,12]"
    dataRegex: "(\\d{1,2})"
  }
  brushlessModulus: {
    type: int
    dataRegex: "(\\d{1,6})"
  }
  
  
}
